{
    "toolboxConstructGroupOptions": {
        "loops": {
            "includeCategory": 1,
            "categoryDisplayName": "Loops",
            "categoryId": "loops-toolbox-group",
            "includeCategoryItems": {
                "while": 1,
                "for": 1,
                "range": 1
            }
        },
        "conditionals": {
            "includeCategory": 1,
            "categoryDisplayName": "Conditionals",
            "categoryId": "conditionals-toolbox-group",
            "includeCategoryItems": {
                "if": 1,
                "elif": 1,
                "else": 1
            }
        },
        "generalFunctions": {
            "includeCategory": 1,
            "categoryDisplayName": "Functions",
            "categoryId": "functions-toolbox-group",
            "includeCategoryItems": {
                "print": 1,
                "input": 1,
                "len": 1
            }
        },
        "variables": {
            "includeCategory": 1,
            "categoryDisplayName": "Variables",
            "categoryId": "create-var-toolbox-group",
            "includeCategoryItems": {
                "addVar": 1,
                "assign": 1,
                "assignAdd": 1,
                "assignSub": 1,
                "assignMult": 1,
                "assignDiv": 1
            }
        },
        "numbers": {
            "includeCategory": 1,
            "categoryDisplayName": "Numbers",
            "categoryId": "numbers-toolbox-group",
            "includeCategoryItems": {
                "num": 1,
                "randint": 1
            }
        },
        "texts": {
            "includeCategory": 1,
            "categoryDisplayName": "Text",
            "categoryId": "text-toolbox-group",
            "includeCategoryItems": {
                "str": 1,
                "split": 1,
                "join": 1,
                "find": 1,
                "replace": 1
            }
        },
        "list": {
            "includeCategory": 1,
            "categoryDisplayName": "Lists",
            "categoryId": "list-ops-toolbox-group",
            "includeCategoryItems": {
                "listLiteral": 1,
                "listItem": 1,
                "listIndex": 1,
                "listAppend": 1
            }
        },
        "arithmetics": {
            "includeCategory": 1,
            "categoryDisplayName": "Arithmetics",
            "categoryId": "arithmetics-toolbox-group",
            "includeCategoryItems": {
                "binAdd": 1,
                "binSub": 1,
                "binMult": 1,
                "binDiv": 1
            }
        },
        "comparisons": {
            "includeCategory": 1,
            "categoryDisplayName": "Comparisons",
            "categoryId": "comparison-ops-toolbox-group",
            "includeCategoryItems": {
                "compEq": 1,
                "compNeq": 1,
                "compLt": 1,
                "compLte": 1,
                "compGt": 1,
                "comptGte": 1
            }
        },
        "booleans": {
            "includeCategory": 1,
            "categoryDisplayName": "Booleans",
            "categoryId": "boolean-ops-toolbox-group",
            "includeCategoryItems": {
                "and": 1,
                "or": 1,
                "unaryNot": 1,
                "boolT": 1,
                "boolF": 1
            }
        },
        "castingFunctions": {
            "includeCategory": 1,
            "categoryDisplayName": "Casting",
            "categoryId": "casting-toolbox-group",
            "includeCategoryItems": {
                "toStr": 1
            }
        },
        "imports": {
            "includeCategory": 1,
            "categoryDisplayName": "Imports",
            "categoryId": "import-toolbox-group",
            "includeCategoryItems": {
                "import": 1
            }
        }
    },
    "toolboxDefaultButtonTemplates": {
        "print": {
            "id": "add-print-btn",
            "text": "print(---)",
            "returnType": null
        },
        "randint": {
            "id": "add-randint-btn",
            "text": "randint(---, ---)",
            "returnType": " -> number"
        },
        "range": {
            "id": "add-range-btn",
            "text": "range(---, ---)",
            "returnType": " -> iterator"
        },
        "len": {
            "id": "add-len-btn",
            "text": "len(---)",
            "returnType": " -> number"
        },
        "input": {
            "id": "add-input-btn",
            "text": "input(---)",
            "returnType": " -> text"
        },
        "while": {
            "id": "add-while-expr-btn",
            "text": "while ---:",
            "returnType": null,
            "documentation": {
                "title": "while loop",
                "body": [
                    {
                        "paragraph": "A while loop repeatedly executes a set of statements as long as a condition is true"
                    },
                    { "example": "while True :\n\tprint(\"an infinite loop\")" },
                    {
                        "paragraph": "A while loop repeatedly executes a set of statements as long as a condition is true"
                    },
                    { "example": "i = 0\nwhile i < 10:\n\tprint(i)\n\ti = i + 1" },
                    {
                        "paragraph": "A while loop repeatedly executes a set of statements as long as a condition is true"
                    }
                ]
            }
        },
        "if": {
            "id": "add-if-expr-btn",
            "text": "if ---:",
            "returnType": null
        },
        "elif": {
            "id": "add-elif-expr-btn",
            "text": "elif ---:",
            "returnType": null
        },
        "else": {
            "id": "add-else-expr-btn",
            "text": "else:",
            "returnType": null
        },
        "for": {
            "id": "add-for-expr-btn",
            "text": "for --- in ---:",
            "returnType": null
        },
        "split": {
            "id": "add-split-method-call-btn",
            "text": ".split(---)",
            "returnType": " -> list[text]"
        },
        "join": {
            "id": "add-join-method-call-btn",
            "text": ".join(---)",
            "returnType": " -> text"
        },
        "find": {
            "id": "add-find-method-call-btn",
            "text": ".find(---)",
            "returnType": " -> number"
        },
        "replace": {
            "id": "add-replace-method-call-btn",
            "text": ".replace(---)",
            "returnType": " -> text"
        },
        "addVar": {
            "id": "add-var-btn",
            "text": "--- = ---",
            "returnType": null
        },
        "assign": {
            "id": "add-assign-mod-btn",
            "text": "= ---",
            "returnType": null
        },
        "assignAdd": {
            "id": "add-aug-assign-add-mod-btn",
            "text": "+= ---",
            "returnType": null
        },
        "assignSub": {
            "id": "add-aug-assign-sub-mod-btn",
            "text": "-= ---",
            "returnType": null
        },
        "assignMult": {
            "id": "add-aug-assign-mul-mod-btn",
            "text": "*= ---",
            "returnType": null
        },
        "assignDiv": {
            "id": "add-aug-assign-div-mod-btn",
            "text": "/= ---",
            "returnType": null
        },
        "listLiteral": {
            "id": "add-list-literal-btn",
            "text": "[]",
            "returnType": " -> list[any]"
        },
        "listItem": {
            "id": "add-list-item-btn",
            "text": ", ---",
            "returnType": null
        },
        "listAppend": {
            "id": "add-list-append-stmt-btn",
            "text": "---.append(---)",
            "returnType": null
        },
        "listIndex": {
            "id": "add-list-index-btn",
            "text": "[---]",
            "returnType": " -> any"
        },
        "listElementAssign": {
            "id": "add-list-elem-assign-btn",
            "text": "---[---] = ---",
            "returnType": null
        },
        "str": {
            "id": "add-str-btn",
            "text": "\"txt\"",
            "returnType": " -> text"
        },
        "num": {
            "id": "add-num-btn",
            "text": "123",
            "returnType": " -> number"
        },
        "boolT": {
            "id": "add-true-btn",
            "text": "True",
            "returnType": " -> boolean"
        },
        "boolF": {
            "id": "add-false-btn",
            "text": "False",
            "returnType": " -> boolean"
        },
        "toStr": {
            "id": "add-cast-str-btn",
            "text": "str(---)",
            "returnType": " -> text"
        },
        "binAdd": {
            "id": "add-bin-add-expr-btn",
            "text": "--- + ---",
            "returnType": " -> number / text"
        },
        "binSub": {
            "id": "add-bin-sub-expr-btn",
            "text": "--- - ---",
            "returnType": " -> number"
        },
        "binMult": {
            "id": "add-bin-mul-expr-btn",
            "text": "--- * ---",
            "returnType": " -> number"
        },
        "binDiv": {
            "id": "add-bin-div-expr-btn",
            "text": "--- / ---",
            "returnType": " -> number"
        },
        "and": {
            "id": "add-bin-and-expr-btn",
            "text": "--- and ---",
            "returnType": " -> boolean"
        },
        "or": {
            "id": "add-bin-or-expr-btn",
            "text": "--- or ---",
            "returnType": " -> boolean"
        },
        "unaryNot": {
            "id": "add-unary-not-expr-btn",
            "text": "not ---",
            "returnType": " -> boolean"
        },
        "compEq": {
            "id": "add-comp-eq-expr-btn",
            "text": "--- == ---",
            "returnType": " -> boolean"
        },
        "compNeq": {
            "id": "add-comp-neq-expr-btn",
            "text": "--- != ---",
            "returnType": " -> boolean"
        },
        "compLt": {
            "id": "add-comp-lt-expr-btn",
            "text": "--- < ---",
            "returnType": " -> boolean"
        },
        "compLte": {
            "id": "add-comp-lte-expr-btn",
            "text": "--- <= ---",
            "returnType": " -> boolean"
        },
        "compGt": {
            "id": "add-comp-gt-expr-btn",
            "text": "--- > ---",
            "returnType": " -> boolean"
        },
        "comptGte": {
            "id": "add-comp-gte-expr-btn",
            "text": "--- >= ---",
            "returnType": " -> boolean"
        },
        "import": {
            "id": "add-import-btn",
            "text": "from --- import ---",
            "returnType": null
        }
    }
}
