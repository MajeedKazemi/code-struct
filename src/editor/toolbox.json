{
    "toolboxConstructGroupOptions": {
        "loops": {
            "includeCategory": 1,
            "categoryDisplayName": "Loops",
            "categoryId": "loops-toolbox-group",
            "includeCategoryItems": {
                "while": 1,
                "for": 1,
                "range": 1
            }
        },
        "conditionals": {
            "includeCategory": 1,
            "categoryDisplayName": "Conditionals",
            "categoryId": "conditionals-toolbox-group",
            "includeCategoryItems": {
                "if": 1,
                "elif": 1,
                "else": 1
            }
        },
        "generalFunctions": {
            "includeCategory": 1,
            "categoryDisplayName": "Functions",
            "categoryId": "functions-toolbox-group",
            "includeCategoryItems": {
                "print": 1,
                "input": 1,
                "len": 1
            }
        },
        "variables": {
            "includeCategory": 1,
            "categoryDisplayName": "Variables",
            "categoryId": "create-var-toolbox-group",
            "includeCategoryItems": {
                "addVar": 1,
                "assign": 1,
                "assignAdd": 1,
                "assignSub": 1,
                "assignMult": 1,
                "assignDiv": 1
            }
        },
        "numbers": {
            "includeCategory": 1,
            "categoryDisplayName": "Numbers",
            "categoryId": "numbers-toolbox-group",
            "includeCategoryItems": {
                "num": 1,
                "randint": 1
            }
        },
        "texts": {
            "includeCategory": 1,
            "categoryDisplayName": "Text",
            "categoryId": "text-toolbox-group",
            "includeCategoryItems": {
                "str": 1,
                "split": 1,
                "join": 1,
                "find": 1,
                "replace": 1
            }
        },
        "list": {
            "includeCategory": 1,
            "categoryDisplayName": "Lists",
            "categoryId": "list-ops-toolbox-group",
            "includeCategoryItems": {
                "listLiteral": 1,
                "listItem": 1,
                "listIndex": 1,
                "listAppend": 1
            }
        },
        "arithmetics": {
            "includeCategory": 1,
            "categoryDisplayName": "Arithmetics",
            "categoryId": "arithmetics-toolbox-group",
            "includeCategoryItems": {
                "binAdd": 1,
                "binSub": 1,
                "binMult": 1,
                "binDiv": 1
            }
        },
        "comparisons": {
            "includeCategory": 1,
            "categoryDisplayName": "Comparisons",
            "categoryId": "comparison-ops-toolbox-group",
            "includeCategoryItems": {
                "compEq": 1,
                "compNeq": 1,
                "compLt": 1,
                "compLte": 1,
                "compGt": 1,
                "comptGte": 1
            }
        },
        "booleans": {
            "includeCategory": 1,
            "categoryDisplayName": "Booleans",
            "categoryId": "boolean-ops-toolbox-group",
            "includeCategoryItems": {
                "and": 1,
                "or": 1,
                "unaryNot": 1,
                "boolT": 1,
                "boolF": 1
            }
        },
        "castingFunctions": {
            "includeCategory": 1,
            "categoryDisplayName": "Casting",
            "categoryId": "casting-toolbox-group",
            "includeCategoryItems": {
                "toStr": 1
            }
        },
        "imports": {
            "includeCategory": 1,
            "categoryDisplayName": "Imports",
            "categoryId": "import-toolbox-group",
            "includeCategoryItems": {
                "import": 1
            }
        }
    },
    "toolboxDefaultButtonTemplates": {
        "print": {
            "id": "add-print-btn",
            "text": "print(---)",
            "returnType": null,
            "documentation": {
                "title": "print(msg: object)",
                "body": [
                    {
                        "paragraph": "The <span class=\"bold\">print()</span> function will display a message in the console as text. It can accept anything as its argument and will try to convert it to text before displaying it."
                    },
                    {"paragraph": "The below will print 123 to the console."},
                    { "example": "print(123)" },
                    {
                        "paragraph": "<span class=\"bold\">print()</span> can also be used with variables."
                    },
                    { "example": "a = \"abc\"\nprint(a)" }
                ]
            }
        },
        "randint": {
            "id": "add-randint-btn",
            "text": "randint(---, ---)",
            "returnType": " -> number",
            "documentation": {
                "title": "randint(min: number, max: number)",
                "body": [
                    {
                        "paragraph": "Returns a randomly chosen number from the range <span class=\"italics bold\">min</span> to <span class=\"italics bold\">max - 1</span>."
                    },
                    { "example": "a = randint(0, 10)\nprint(a)" },
                    {
                        "paragraph": "Could print any of the following numbers: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9"
                    }
                ]
            }
        },
        "range": {
            "id": "add-range-btn",
            "text": "range(---, ---)",
            "returnType": " -> iterator",
            "documentation": {
                "title": "range(start: number, end: number)",
                "body": [
                    {
                        "paragraph": "Returns a sequence of numbers starting at <span class=\"italics bold\">start</span> and terminating at <span class=\"italics bold\">end - 1</span>."
                    },
                    { "example": "range(0, 10)" },
                    {
                        "paragraph": "A for-loop can also be used together with the <span class=\"bold\">range()</span> function call to go through a sequence of numbers."
                    },
                    { "example": "for i in range(1, 10):\n\tprint(i)" }
                ]
            }
        },
        "len": {
            "id": "add-len-btn",
            "text": "len(---)",
            "returnType": " -> number",
            "documentation": {
                "title": "len(iterable: object)",
                "body": [
                    {
                        "paragraph": "<span class=\"bold\">len()</span> returns the number of items in an object; the number of characters in a text object."
                    },
                    {
                        "example": "greeting = \"Hello World!\"\na = len(greeting)\nprint(a)"
                    },
                    {
                        "paragraph": "It can also be used on lists."
                    },
                    {
                        "example": "items = [1, 2, 3]\na = len(items)\nprint(a)"
                    }
                ]
            }
        },
        "input": {
            "id": "add-input-btn",
            "text": "input(---)",
            "returnType": " -> text",
            "documentation": {
                "title": "input(prompt: text)",
                "body": [
                    {
                        "paragraph": "The <span class=\"bold\">input()</span> function allows the program to ask the user for input. The prompt that is included will be displayed to the user before asking them for input."
                    },
                    {
                        "paragraph": "The below example with ask the user's name and print it to the console."
                    },
                    { "example": "name = input(\"Hi! Whatâ€™s your name?\")\nprint(name)" },
                    {
                        "paragraph": "<span class=\"bold\">NOTE: The value returned by the <span class=\"italics bold\">input()</span> function is always text and has to be cast to other datatypes if you are expecting anything other than a text. </span>"
                    }
                ]
            }
        },
        "while": {
            "id": "add-while-expr-btn",
            "text": "while ---:",
            "returnType": null,
            "documentation": {
                "title": "while loop",
                "body": [
                    {
                        "paragraph": "A while loop repeatedly executes a set of statements as long as a condition is <span class=\"bold\">true</span>."
                    },
                    { "example": "while True :\n\tprint(\"an infinite loop\")" },
                    {
                        "paragraph": "The following loop will print numbers from 0 to 9."
                    },
                    { "example": "i = 0\nwhile i < 10:\n\tprint(i)\n\ti = i + 1" }
                ]
            }
        },
        "if": {
            "id": "add-if-expr-btn",
            "text": "if ---:",
            "returnType": null,
            "documentation": {
                "title": "if statement",
                "body": [
                    {
                        "paragraph": "The if conditional statement will execute a block of code only if its condition is <span class=\"bold\">true</span>. Its condition can be filled with anything that evaluates to <span class=\"bold\">true</span> or <span class=\"bold\">false</span>."
                    },
                    {
                        "paragraph": "The below example will print \"Success!\"."
                    },
                    { "example": "a = 3\nif a < 10:\n\tprint(\"Success!\")" },
                    {
                        "paragraph": "The below example, however, will not print anything because the code inside the if-statement will not be run since the condition is <span class=\"bold\">false</span>."
                    },
                    { "example": "a = 3\nif a > 10:\n\tprint(\"Success!\")" }
                ]
            }
        },
        "elif": {
            "id": "add-elif-expr-btn",
            "text": "elif ---:",
            "returnType": null,
            "documentation": {
                "title": "elif statement",
                "body": [
                    {
                        "paragraph": "A conditional statement that can only be used after an if-statement and allows us to add more cases to create an <span class=\"italics bold\">if block</span>. It executes only if the statements above it evaluate to <span class=\"bold\">false</span>."
                    },
                    { "example": "a = 3\nif a > 10:\n\tprint(\"a is larger than 10\")\nelif a < 10:\n\tprint(\"a is smaller than 10\")" },
                    {
                        "paragraph": "<span class=\"bold\">elif</span> statements allow us to group related conditions together and we can have multiple of them in one <span class=\"bold\">if block</span>. The code below will print 5."
                    },
                    { "example": "a = 5\nif a > 3:\n\tprint(3)\nelif a > 4:\n\tprint(4)\nelif a == 5:\n\tprint(5)\nelif a > 6:\n\tprint(6)" }
                ]
            }
        },
        "else": {
            "id": "add-else-expr-btn",
            "text": "else:",
            "returnType": null,
            "documentation": {
                "title": "else statement",
                "body": [
                    {
                        "paragraph": "A conditional statement that can only be used after an elif statement. It can be used to terminate an <span class=\"bold\">if block</span> and executes only if all of the conditions above it evaluate to <span class=\"bold\">false</span>."
                    },
                    { "example": "a = 2\nif a > 3:\n\tprint(3)\nelif a > 4:\n\tprint(4)\nelif a == 5:\n\tprint(5)\nelif a > 6:\n\tprint(6)\nelse:\n\tprint(\"None of the above are true.\")" }
                ]
            }
        },
        "for": {
            "id": "add-for-expr-btn",
            "text": "for --- in ---:",
            "returnType": null,
            "documentation": {
                "title": "for loop",
                "body": [
                    {
                        "paragraph": "A for-loop can be used to go through a sequence of elements one-by-one. \n\n Notice the usage of \"animal\", this is the variable that holds the current value of our item."
                    },
                    { "example": "lst = [\"cat\", \"dog\", \"mouse\", \"parrot\"]\nfor animal in lst:\n\tprint(animal)" },
                    {
                        "paragraph": "A for-loop can also be used together with the <span class=\"bold\">range()</span> function call to go through a sequence of numbers."
                    },
                    { "example": "for i in range(1, 10):\n\tprint(i)" }
                ]
            }
        },
        "split": {
            "id": "add-split-function-call-btn",
            "text": ".split(---)",
            "returnType": " -> list[text]",
            "documentation": {
                "title": "split(separator: text)",
                "body": [
                    {
                        "paragraph": "Splits the text the function is being called from into a list based on a separator text. Returns an array containing the separate components of the text."
                    },
                    {
                        "paragraph": "The below example will print [\"Split\", \"this\", \"text\", \"on\", \"hyphen\"]"
                    },
                    { "example": "name = \"Split-this-text-on-hyphen\"\nsplitName = name.split(\"-\")\nprint(splitName)" }
                    
                ]
            }
        },
        "join": {
            "id": "add-join-function-call-btn",
            "text": ".join(---)",
            "returnType": " -> text",
            "documentation": {
                "title": "join(elements: [text])",
                "body": [
                    {
                        "paragraph": "Joins a list of text values together and places the text the function is being called from as the separator between the elements of the list provided. Returns a new text object."
                    },
                    {
                        "paragraph": "The below example will print \"Anna-John-Peter\" as a single text object."
                    },
                    { "example": "names = [\"Anna\", \"John\", \"Peter\"]\njoinedNames = \"-\".join(names)\nprint(joinedNames)" }
                ]
            }
        },
        "find": {
            "id": "add-find-function-call-btn",
            "text": ".find(---)",
            "returnType": " -> number",
            "documentation": {
                "title": "find(txt: text)",
                "body": [
                    {
                        "paragraph": "Finds the first occurrence of the specified text value in the text the function is being called from and returns its index; -1 if the value was not found."
                    },
                    {
                        "paragraph": "The below example will print 4 because text is 0-indexed. "
                    },
                    { "example": "name = \"Zimmer\"\nindexOfE = name.find(\"e\")\nprint(indexOfE)" }
                ]
            }
        },
        "replace": {
            "id": "add-replace-function-call-btn",
            "text": ".replace(---)",
            "returnType": " -> text",
            "documentation": {
                "title": "replace(oldValue: text, newValue: text)",
                "body": [
                    {
                        "paragraph": "Replaces all occurrences of <span class=\"italics\">oldValue</span> with <span class=\"italics\">newValue</span> in the text the function is being called from. Returns a new text object."
                    },
                    {
                        "paragraph": "The below example will print \"Jan\". "
                    },
                    { "example": "name  = \"John\"\nname = name.replace(\"oh\", \"a\")\nprint(name)" }
                ]
            }
        },
        "addVar": {
            "id": "add-var-btn",
            "text": "--- = ---",
            "returnType": null,
            "documentation": {
                "title": "Create/Reassign Variable",
                "body": [
                    {
                        "paragraph": "Creates a new variable with the left hole expecting an identifier (name) for the variable. The second hole expects the value that will be stored in the variable."
                    },
                    { "example": "name = \"John\"" }
                ]
            }
        },
        "assign": {
            "id": "add-assign-mod-btn",
            "text": "= ---",
            "returnType": null,
            "documentation": {
                "title": "Assign to Variable",
                "body": [
                    {
                        "paragraph": "Assigns a new value to an existing variable. Requires a reference to the variable to already be inserted before using this modifier."
                    },
                    { "example": "a = 123\nprint(a)\na=321\nprint(a)" }
                ]
            }
        },
        "assignAdd": {
            "id": "add-aug-assign-add-mod-btn",
            "text": "+= ---",
            "returnType": null,
            "documentation": {
                "title": "Add to Variable",
                "body": [
                    {
                        "paragraph": "Adds a value to an existing variable and reassigns it back to the variable."
                    },
                    {
                        "paragraph": "The below will print 4. It is equivalent to <span class=\"italics\">a = a + 2</span>."
                    },
                    { "example": "a = 2\na += 2\nprint(a)" }
                ]
            }
        },
        "assignSub": {
            "id": "add-aug-assign-sub-mod-btn",
            "text": "-= ---",
            "returnType": null,
            "documentation": {
                "title": "Subtract from Variable",
                "body": [
                    {
                        "paragraph": "Subtracts a value from an existing variable and reassigns the result back to the variable."
                    },
                    {
                        "paragraph": "The below will print 3. It is equivalent to <span class=\"italics\">a = a - 2</span>."
                    },
                    { "example": "a = 5\na -= 2\nprint(a)" }
                ]
            }
        },
        "assignMult": {
            "id": "add-aug-assign-mul-mod-btn",
            "text": "*= ---",
            "returnType": null,
            "documentation": {
                "title": "Multiply a Variable",
                "body": [
                    {
                        "paragraph": "Multiplies the value of an existing variable by the value of the provided expression and reassings it back."
                    },
                    {
                        "paragraph": "The below will print 10. It is equivalent to a = a * 2"
                    },
                    { "example": "a = 5\na *= 2\nprint(a)" }
                ]
            }
        },
        "assignDiv": {
            "id": "add-aug-assign-div-mod-btn",
            "text": "/= ---",
            "returnType": null,
            "documentation": {
                "title": "Divide a Variable",
                "body": [
                    {
                        "paragraph": "Divides the value of an existing variable by the value of the given expression and reassigns it back."
                    },
                    {
                        "paragraph": "The below will print 5. It is equivalent to a = a / 2"
                    },
                    { "example": "a = 10\na /= 2\nprint(a)" }
                ]
            }
        },
        "listLiteral": {
            "id": "add-list-literal-btn",
            "text": "[]",
            "returnType": " -> list[any]",
            "documentation": {
                "title": "List",
                "body": [
                    {
                        "paragraph": "Inserts an empty list into a hole. The list can be populated with multiple values after creation by navigating inside the list and inserting a value. New values in a list are separated by a comma."
                    },
                    { "example": "a = []" },
                    {"example": "a = [1, 2, 3]"},
                    {
                        "paragraph": "Lists can store a variety of types and even different types within the same list."
                    },
                    {"example": "a = [\"cat\", \"dog\", \"parrot\"]\nb = [1, \"cat\", true]\nc = [1, [1, \"dog\"], \"cat\", [true]]"}
                ]
            }
        },
        "listItem": {
            "id": "add-list-item-btn",
            "text": ", ---",
            "returnType": null,
            "documentation": {
                "title": "List Item",
                "body": [
                    {
                        "paragraph": "Insert a new empty list element that can be filled with the value you want to insert into a list. Should be used either when focused on an empty element of a list or just to the right of an existing or empty element."
                    },
                    {"example": "a = [1, 2, 3]"}
                ]
            }
        },
        "listAppend": {
            "id": "add-list-append-stmt-btn",
            "text": "---.append(---)",
            "returnType": null,
            "documentation": {
                "title": "append(element: object)",
                "body": [
                    {
                        "paragraph": "Appends (adds to the end of) a new element to an existing list. Can be used on both, list literals and variables of type list. Does not return anything!"
                    },
                    {
                        "paragraph": "The below code should print [1, 2, 3, 4]"
                    },
                    {"example": "a = [1, 2, 3]\na.append(4)\nprint(a)"},
                    {
                        "paragraph": "The below code will print <span class=\"italics bold\">none</span> because the <span class=\"bold\">append()</span> function does not return anything. The list will also be lost."
                    },
                    {"example": "print([1, 2, 3].append(4))"}
                ]
            }
        },
        "listIndex": {
            "id": "add-list-index-btn",
            "text": "[---]",
            "returnType": " -> any",
            "documentation": {
                "title": "List Element Access",
                "body": [
                    {
                        "paragraph": "Used after a list or a variable of type list to access an element of the list at the provided index. <span class=\"bold\">Lists are 0-indexed meaning that the first element of a list is at position 0 and not 1.</span>"
                    },
                    {
                        "paragraph": "The below code will print 1 (the first element of the list)."
                    },
                    {"example": "a = [1, 2, 3]\nprint(a[0])"},
                    {
                        "paragraph": "After being accessed, the element can be used just like any other value."
                    },
                    {"example": "a = [1, 2, 3]\nif a[1] == 2:\n\tprint(\"The second element of the list is equal to 2.\")"}
                ]
            }
        },
        "listElementAssign": {
            "id": "add-list-elem-assign-btn",
            "text": "---[---] = ---",
            "returnType": null,
            "documentation": {
                "title": "List Element Assignment",
                "body": [
                    {
                        "paragraph": "Will assign a new value to the element at the provided index of a list. See <span class=\"bold\">List Element Access</span> for more information."
                    },
                    {
                        "paragraph": "The below code will print [1, 2, 4]. Notice how the last element was changed from 3 to 4."
                    },
                    {"example": "a = [1, 2, 3]\na[2] = 4\nprint(a)"},
                    {
                        "paragraph": "The new value does not have to be of the same type as the old value. The below will print([1, \"cat\", 3])"
                    },
                    {"example": "a = [1, 2, 3]\na[1] = \"cat\"\nprint(a)"}
                ]
            }
        },
        "str": {
            "id": "add-str-btn",
            "text": "\"txt\"",
            "returnType": " -> text",
            "documentation": {
                "title": "text",
                "body": [
                    {
                        "paragraph": "Inserts a text value into an empty hole. Note that text is 0-indexed which means its first character is considered to be at position 0 in the text and not position 1."
                    }
                ]
            }
        },
        "num": {
            "id": "add-num-btn",
            "text": "123",
            "returnType": " -> number",
            "documentation": {
                "title": "123",
                "body": [
                    {
                        "paragraph": "Inserts a numeric value (0 by default) into an empty hole."
                    }
                ]
            }
        },
        "boolT": {
            "id": "add-true-btn",
            "text": "True",
            "returnType": " -> boolean",
            "documentation": {
                "title": "true",
                "body": [
                    {
                        "paragraph": "Inserts a boolean value of <span class=\"bold\">true</span> into an empty hole."
                    }
                ]
            }
        },
        "boolF": {
            "id": "add-false-btn",
            "text": "False",
            "returnType": " -> boolean",
            "documentation": {
                "title": "false",
                "body": [
                    {
                        "paragraph": "Inserts a boolean value of <span class=\"bold\">false</span> into an empty hole."
                    }
                ]
            }
        },
        "toStr": {
            "id": "add-cast-str-btn",
            "text": "str(---)",
            "returnType": " -> text",
            "documentation": {
                "title": "str(obj: object)",
                "body": [
                    {
                        "paragraph": "Converts the passed object to a text object. Useful when comparing values of different types and one of them is a text value. This type of conversion is called a <span class\"bold\">cast</span> because it is temporary."
                    },
                    {"example": "a = 2\nc = \"2\"\nprint(str(a) == c)"},
                    {"paragraph": "In the above example you would not be able to compare <span class\"italics\">a</span> to <span class\"italics\">c</span> before performing the conversion."
                    }
                ]
            }
        },
        "binAdd": {
            "id": "add-bin-add-expr-btn",
            "text": "--- + ---",
            "returnType": " -> number / text",
            "documentation": {
                "title": "+",
                "body": [
                    {
                        "paragraph": "Performs the addition of the value to the right of the operator to the value to the left on the operator."
                    },
                    {
                        "paragraph": "The below prints 7."
                    },
                    {"example": "a = 2\nb = 5\nprint((a + b))"}
                ]
            }
        },
        "binSub": {
            "id": "add-bin-sub-expr-btn",
            "text": "--- - ---",
            "returnType": " -> number",
            "documentation": {
                "title": "-",
                "body": [
                    {
                        "paragraph": "Performs the subtraction of the value to the right of the operator from the value to the left on the operator."
                    },
                    {
                        "paragraph": "The below prints 10."
                    },
                    {"example": "a = 20\nb = 10\nprint((a - b))"}
                ]
            }
        },
        "binMult": {
            "id": "add-bin-mul-expr-btn",
            "text": "--- * ---",
            "returnType": " -> number",
            "documentation": {
                "title": "*",
                "body": [
                    {
                        "paragraph": "Performs the multiplication of the value to the left of the operator by the value to the right on the operator."
                    },
                    {
                        "paragraph": "The below prints 10."
                    },
                    {"example": "a = 2\nb = 5\nprint((b * a))"}
                ]
            }
        },
        "binDiv": {
            "id": "add-bin-div-expr-btn",
            "text": "--- / ---",
            "returnType": " -> number",
            "documentation": {
                "title": "/",
                "body": [
                    {
                        "paragraph": "Performs the division of the value to the left of the operator by the value to the right on the operator."
                    },
                    {
                        "paragraph": "The below prints 5."
                    },
                    {"example": "a = 2\nb = 10\nprint((b / a))"}
                ]
            }
        },
        "and": {
            "id": "add-bin-and-expr-btn",
            "text": "--- and ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "and",
                "body": [
                    {
                        "paragraph": "A boolean operator used to combine conditional expressions together. Evaluates to true as long as both of the expressions it contains are <span class=\"bold\">true</span>."
                    },
                    {"example": "if (true and true):\n\tprint(true)\n\nif (true and false):\n\tprint(\"not true\")\n\nif (false and true):\n\tprint(\"still not true\")\n\nif (false and false):\n\tprint(\"also false\")"},
                    {"example": "a = 5\nb = 7\nc=2\n\nif ((a > c) and (b > c)):\n\tprint(\"Both expressions are true.\")"}
                ]
            }
        },
        "or": {
            "id": "add-bin-or-expr-btn",
            "text": "--- or ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "or",
                "body": [
                    {
                        "paragraph": "A boolean operator used to combine conditional expressions together. Evaluates to true as long as at least one of the expressions it contains is <span class=\"bold\">true</span>."
                    },
                    {"example": "if (true or true):\n\tprint(true)\n\nif (true or false):\n\tprint(\"true\")\n\nif (false or true):\n\tprint(\"still true\")\n\nif (false or false):\n\tprint(\"false\")"},
                    {"example": "a = 5\nb = 7\nc=2\n\nif ((a > c) or (b < c)):\n\tprint(\"Only the first expression is true.\")"}
                ]
            }
        },
        "unaryNot": {
            "id": "add-unary-not-expr-btn",
            "text": "not ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Not",
                "body": [
                    {
                        "paragraph": "A boolean operator (<span class=\"bold\">not</span>) that returns <span class=\"bold\">true</span> the logical negation of a boolean value. That is if the value evaluates to <span class=\"bold\">true</span>, then <span class=\"bold\"> not true</span> will evaluate to <span class=\"bold\">false</span> and vice versa."
                    },
                    {"example": "a = 2\nb = 2\nif not (a == b):\n\tprint(\"Will not print.\")\n\nif not (b != a):\n\tprint(\"b is equal to a\")"},
                    {
                        "paragraph": "In the code above the first condition evalues to <span class=\"bold\">false</span> because the value of <span class=\"italics\">a == b</span> is actually <span class=\"bold\">true</span>."
                    }
                ]
            }
        },
        "compEq": {
            "id": "add-comp-eq-expr-btn",
            "text": "--- == ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Equal",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\">==</span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is equal the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\nif a == c:\n\tprint(\"a is equal to c\")\n\nif b == a:\n\tprint(\"This will not print because the condition is false.\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 5\nb = 5\nwhile a == b:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "compNeq": {
            "id": "add-comp-neq-expr-btn",
            "text": "--- != ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Not Equal",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\">!=</span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is not equal the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\nif a != b:\n\tprint(\"a is not equal to b\")\n\nif c != a:\n\tprint(\"This will not print because the condition is false.\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 1\nb = 5\nwhile a != b:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "compLt": {
            "id": "add-comp-lt-expr-btn",
            "text": "--- < ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Less Than",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\"><</span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is strictly less than the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\nif a < b:\n\tprint(\"a is less than b\")\n\nif c < a:\n\tprint(\"This will not print because the condition is false.\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 1\nb = 5\nwhile a < b:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "compLte": {
            "id": "add-comp-lte-expr-btn",
            "text": "--- <= ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Less Than or Equal",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\"><=</span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is less than or equal to the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\n c = 2\n if a <= b:\n\tprint(\"a is less than b\")\n\nif c <= a:\n\tprint(\"c is equal to a\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 1\nb = 5\nwhile a <= b:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "compGt": {
            "id": "add-comp-gt-expr-btn",
            "text": "--- > ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Greater Than",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\">></span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is strictly greater than the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\nif b > a:\n\tprint(\"b is greater than a\")\n\nif a > b:\n\tprint(\"a is greater to b\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 1\nb = 5\nwhile b > a:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "comptGte": {
            "id": "add-comp-gte-expr-btn",
            "text": "--- >= ---",
            "returnType": " -> boolean",
            "documentation": {
                "title": "Greater Than or Equal",
                "body": [
                    {
                        "paragraph": "A comparison operator (<span class=\"bold\">>=</span>) that returns <span class=\"bold\">true</span> if the item on the left of the operator is greater than or equal to the item to the right of the operator. Returns <span class=\"bold\">false</span> otherwise."
                    },
                    {"example": "a = 2\nb = 3\n c = 2\n if b >= a:\n\tprint(\"b is greater than a\")\n\nif c >= a:\n\tprint(\"c is equal to a\")"},
                    {
                        "paragraph": "Most often used to compare two values and subsequently execute or not execute a block of code based on the value of the comparison."
                    },
                    {"example": "a = 1\nb = 5\nwhile b >= a:\n\ta += 1\nprint(a)\nprint(a)"}
                ]
            }
        },
        "import": {
            "id": "add-import-btn",
            "text": "from --- import ---",
            "returnType": null,
            "documentation": {
                "title": "Import Module",
                "body": [
                    {
                        "paragraph": "Import a module containing common existing functionality that is separate from your code. Some functions and definitions are already defined by Python by default in different modules. However, Python does not include them into your program by default and so you have to make an import of those modules/functionalities."
                    },
                    {
                        "paragraph": "The two most common modules to import from are <span class=\"bold\">math</span> and <span class=\"bold\">random</span>. In this tool you can import one item at a time from a specific module."
                    },
                    {
                        "paragraph": "The below will import two functions from the random module, <span class=\"bold\">randint()</span> and <span class=\"bold\">randrange()</span>."
                    },
                    {"example": "from random import randint\nfrom random import randrange"},
                    {
                        "paragraph": "The functions can then be used inside your program below the lines they were imported on."
                    }
                ]
            }
        }
    }
}
